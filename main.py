import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, ConversationHandler, filters
import google.generativeai as genai
from dotenv import load_dotenv
import hashlib
import json
import asyncio
from io import BytesIO
import base64
from PIL import Image
import re
import aiohttp

load_dotenv()


genai.configure(api_key=os.getenv('GEMINI_API_KEY'))
model = genai.GenerativeModel('gemini-1.5-flash')
vision_model = genai.GenerativeModel('gemini-pro-vision')
GOOGLE_API_KEY = os.getenv('GOOGLE_API_KEY')
CUSTOM_SEARCH_ENGINE_ID = os.getenv('CUSTOM_SEARCH_ENGINE_ID')

(GPA, COUNTRY, SAT, IELTS, ADDITIONAL_INFO, SHOWING_UNIVERSITIES, 
 UNIVERSITY_INFO, UNIVERSITY_QUESTIONS) = range(8)

async def get_university_image(uni_name: str) -> BytesIO:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞ —á–µ—Ä–µ–∑ Google Custom Search API"""
    try:
        search_query = f"{uni_name} university campus main building"
        
        params = {
            'key': GOOGLE_API_KEY,
            'cx': CUSTOM_SEARCH_ENGINE_ID,
            'q': search_query,
            'searchType': 'image',
            'imgSize': 'large',
            'imgType': 'photo',
            'num': 1 
        }
        

        async with aiohttp.ClientSession() as session:
            async with session.get('https://www.googleapis.com/customsearch/v1', params=params) as response:
                data = await response.json()
                
                if 'items' in data and len(data['items']) > 0:
                    image_url = data['items'][0]['link']
                    

                    async with session.get(image_url) as img_response:
                        if img_response.status == 200:
                            img_data = await img_response.read()
                            return BytesIO(img_data)
                

        return get_placeholder_image()
        
    except Exception as e:
        print(f"Error fetching image: {str(e)}")
        return get_placeholder_image()

def get_placeholder_image() -> BytesIO:
    """–°–æ–∑–¥–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ-–∑–∞–≥–ª—É—à–∫—É"""
    img = Image.new('RGB', (800, 400), color='white')
    img_byte_arr = BytesIO()
    img.save(img_byte_arr, format='JPEG')
    img_byte_arr.seek(0)
    return img_byte_arr



def clean_json_string(s: str) -> str:
    """Clean and format the string to be valid JSON"""

    match = re.search(r'\{[\s\S]*\}', s)
    if not match:
        return '{}'
    
    json_str = match.group(0)

    json_str = re.sub(r'```json\s*', '', json_str)
    json_str = re.sub(r'```', '', json_str)
    return json_str
async def handle_university_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ"""

    loading_message = await update.message.reply_text(
        "ü§î *–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –≤–æ–ø—Ä–æ—Å...*",
        parse_mode='Markdown'
    )
    

    await context.bot.send_chat_action(
        chat_id=update.message.chat_id,
        action="typing"
    )

    question = update.message.text
    selected_uni = context.user_data.get('selected_uni')
    

    await loading_message.edit_text(
        "üîÑ *–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç...*",
        parse_mode='Markdown'
    )
    
    prompt = f"""
    –í–æ–ø—Ä–æ—Å –ø—Ä–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç {selected_uni['name']}:
    {question}

    –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–± —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ:
    {json.dumps(selected_uni, ensure_ascii=False)}

    –î–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å—Ç—É–¥–µ–Ω—Ç–∞, 
    –≤–∫–ª—é—á–∞—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã, —Ü–∏—Ñ—Ä—ã –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –≥–¥–µ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.
    """
    
    try:
        response = model.generate_content(prompt)
        

        await loading_message.delete()
        

        response_text = (
            f"*–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–æ {selected_uni['name']}:*\n\n"
            f"{response.text}\n\n"
            f"_–ó–∞–¥–∞–π—Ç–µ –µ—â—ë –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ_"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", callback_data="back"),
                InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å", callback_data=f"q_{selected_uni['name']}")
            ]
        ]
        
        await update.message.reply_text(
            response_text,
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        return SHOWING_UNIVERSITIES
        
    except Exception as e:

        await loading_message.delete()
        print(f"Error: {str(e)}")
        
        error_keyboard = [
            [
                InlineKeyboardButton("üîÑ –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞", callback_data=f"q_{selected_uni['name']}"),
                InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞–∑–∞–¥", callback_data="back")
            ]
        ]
        
        await update.message.reply_text(
            "‚ùå *–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞*\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∏–Ω–∞—á–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ",
            reply_markup=InlineKeyboardMarkup(error_keyboard),
            parse_mode='Markdown'
        )
        return SHOWING_UNIVERSITIES
async def process_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—É–¥–µ–Ω—Ç–µ –∏ –ø–æ–¥–±–æ—Ä —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–≤"""
    
    loading_message = await update.message.reply_text(
        "*üîÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–¥–±–∏—Ä–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã...*",
        parse_mode='Markdown'
    )
    
    await context.bot.send_chat_action(
        chat_id=update.message.chat_id,
        action="typing"
    )
    
    user_info = context.user_data
    location_prompt = f"–≤ –≥–æ—Ä–æ–¥–µ {user_info.get('country', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}" if user_info.get('country') else ""
    
    prompt = f"""
    –ù–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å–æ–∑–¥–∞–π JSON —Å—Ç—Ä–æ–≥–æ –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç—Ä–µ—Ö –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞—Ö {location_prompt}.
    –í–∞–∂–Ω–æ: –≤—ã–±–∏—Ä–∞–π —Ç–æ–ª—å–∫–æ —Ä–µ–∞–ª—å–Ω–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –≥–æ—Ä–æ–¥–µ/—Å—Ç—Ä–∞–Ω–µ.

    {{
        "universities": [
            {{
                "name": "–ù–∞–∑–≤–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞",
                "description": "–û–ø–∏—Å–∞–Ω–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞",
                "requirements": {{
                    "gpa": "3.0",
                    "sat": "1200",
                    "ielts": "6.5",
                    "documents": "–°–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤",
                    "additional": "–î–æ–ø —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è"
                }},
                "deadlines": {{
                    "early": "–î–∞—Ç–∞",
                    "regular": "–î–∞—Ç–∞",
                    "rolling": "–î–∞/–ù–µ—Ç"
                }},
                "tuition": {{
                    "amount": "10000",
                    "currency": "USD"
                }},
                "programs": [
                    "–ü—Ä–æ–≥—Ä–∞–º–º–∞ 1",
                    "–ü—Ä–æ–≥—Ä–∞–º–º–∞ 2",
                    "–ü—Ä–æ–≥—Ä–∞–º–º–∞ 3"
                ],
                "scholarships": {{
                    "types": [
                        "–°—Ç–∏–ø–µ–Ω–¥–∏—è 1",
                        "–°—Ç–∏–ø–µ–Ω–¥–∏—è 2"
                    ],
                    "amounts": [
                        "–°—É–º–º–∞ 1",
                        "–°—É–º–º–∞ 2"
                    ],
                    "requirements": "–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —Å—Ç–∏–ø–µ–Ω–¥–∏–π"
                }}
            }}
        ]
    }}

    –î–∞–Ω–Ω—ã–µ —Å—Ç—É–¥–µ–Ω—Ç–∞:
    GPA: {user_info.get('gpa', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
    –°—Ç—Ä–∞–Ω–∞/–ì–æ—Ä–æ–¥: {user_info.get('country', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
    SAT: {user_info.get('sat', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
    IELTS: {user_info.get('ielts', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}
    –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {user_info.get('additional_info', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

    –í–µ—Ä–Ω–∏ —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
    """
    
    try:

        response = model.generate_content(prompt)
        response_text = response.text.strip()
        

        json_str = clean_json_string(response_text)
        data = json.loads(json_str)
        universities = data.get('universities', [])
        
        if not universities:
            raise ValueError("No universities found in response")
        
        await loading_message.delete()
        

        await update.message.reply_text(
            "üéØ *–ù–∞–π–¥–µ–Ω—ã –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã!*\n"
            "_–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –∫–∞–∂–¥—ã–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–æ–º –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏_",
            parse_mode='Markdown'
        )
        
        user_universities = {}
        
        for uni in universities:
            try:
                uni_id = generate_uni_id(uni['name'])
                user_universities[uni_id] = uni
                
                programs_text = "\n".join([f"‚Ä¢ {prog}" for prog in uni.get('programs', [])])
                

                main_info = (
                    f"üèõ *{uni['name']}*\n\n"
                    f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{uni['description']}\n\n"
                    f"üéì *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:*\n{programs_text}\n\n"
                    f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è:*\n"
                    f"{uni['tuition']['amount']} {uni['tuition']['currency']}/–≥–æ–¥"
                )
                

                keyboard = [
                    [
                        InlineKeyboardButton("üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è", callback_data=f"r_{uni_id}"),
                        InlineKeyboardButton("üí∞ –°—Ç–∏–ø–µ–Ω–¥–∏–∏", callback_data=f"s_{uni_id}")
                    ],
                    [
                        InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"q_{uni_id}"),
                        InlineKeyboardButton("üìö –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"u_{uni_id}")
                    ]
                ]
                
                img_data = await get_university_image(uni['name'])
                await context.bot.send_photo(
                    chat_id=update.message.chat_id,
                    photo=img_data,
                    caption=main_info,
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode='Markdown'
                )
                
                await asyncio.sleep(1)
                
            except Exception as e:
                print(f"Error processing university {uni['name']}: {str(e)}")
                continue
        
        context.user_data['universities'] = user_universities
        
        final_keyboard = [
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ", callback_data="restart")]
        ]
        
        await update.message.reply_text(
            "üí° *–í—ã–±–µ—Ä–∏—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –≤—ã—à–µ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏*",
            reply_markup=InlineKeyboardMarkup(final_keyboard),
            parse_mode='Markdown'
        )
        
        return SHOWING_UNIVERSITIES
        
    except Exception as e:
        print(f"Error in process_info: {str(e)}")
        await loading_message.delete()
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –∫–æ–º–∞–Ω–¥–æ–π /start",
            parse_mode='Markdown'
        )
        return ConversationHandler.END

async def handle_scholarship_info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    try:
        uni_id = query.data.split('_')[1]
        universities = context.user_data.get('universities', {})
        selected_uni = universities.get(uni_id)
        
        if selected_uni:
            scholarships_text = (
                f"üí∞ *–°—Ç–∏–ø–µ–Ω–¥–∏–∏ –≤ {selected_uni['name']}*\n\n"
                f"{selected_uni.get('scholarships', '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∏–ø–µ–Ω–¥–∏—è—Ö –Ω–µ —É–∫–∞–∑–∞–Ω–∞')}\n\n"
                f"üí° *–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–ø–µ–Ω–¥–∏—é:*\n"
                f"‚Ä¢ –ü–æ–¥–∞–π—Ç–µ –∑–∞—è–≤–∫—É –∑–∞—Ä–∞–Ω–µ–µ\n"
                f"‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã\n"
                f"‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –¥–µ–¥–ª–∞–π–Ω–∞–º–∏\n"
                f"‚Ä¢ –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–º –æ—Ç–¥–µ–ª–æ–º —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞"
            )
            
            keyboard = [
                [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data=f"u_{uni_id}")],
                [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ —Å—Ç–∏–ø–µ–Ω–¥–∏—è—Ö", callback_data=f"q_{uni_id}")]
            ]
            
            await query.message.edit_text(
                scholarships_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        return SHOWING_UNIVERSITIES
        
    except Exception as e:
        print(f"Error in handle_scholarship_info: {str(e)}")
        await query.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return SHOWING_UNIVERSITIES



async def handle_university_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
    query = update.callback_query
    await query.answer()
    
    if query.data == "restart":
        await query.message.reply_text("üîÑ –ù–∞—á–Ω–µ–º —Å–Ω–∞—á–∞–ª–∞! –í–≤–µ–¥–∏—Ç–µ –≤–∞—à GPA:")
        return GPA
    
    try:
        if '_' not in query.data:
            return SHOWING_UNIVERSITIES
            
        action, uni_id = query.data.split('_')
        universities = context.user_data.get('universities', {})
        selected_uni = universities.get(uni_id)
        
        if not selected_uni:
            await query.message.reply_text("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return SHOWING_UNIVERSITIES

        if action == 'q': 
            context.user_data['selected_uni'] = selected_uni
            await query.message.reply_text(
                f"‚ùì *–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–æ {selected_uni['name']}*\n\n"
                "–Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–π –≤–∞—Å —Ç–µ–º–µ.",
                parse_mode='Markdown'
            )
            return UNIVERSITY_QUESTIONS
        
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back")]]
        
        if action == 'r':  
            requirements = selected_uni['requirements']
            deadlines = selected_uni['deadlines']
            info_text = (
                f"üìã *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ {selected_uni['name']}*\n\n"
                f"üìä *GPA:* {requirements['gpa']}\n"
                f"üìù *SAT:* {requirements['sat']}\n"
                f"üåê *IELTS:* {requirements['ielts']}\n\n"
                f"üìé *–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:*\n{requirements['documents']}\n\n"
                f"‚ÑπÔ∏è *–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:*\n{requirements['additional']}\n\n"
                f"üìÖ *–°—Ä–æ–∫–∏ –ø–æ–¥–∞—á–∏:*\n"
                f"‚Ä¢ –†–∞–Ω–Ω—è—è –ø–æ–¥–∞—á–∞: {deadlines['early']}\n"
                f"‚Ä¢ –û–±—ã—á–Ω–∞—è –ø–æ–¥–∞—á–∞: {deadlines['regular']}\n"
                f"‚Ä¢ Rolling admission: {deadlines['rolling']}"
            )
            
            await query.message.reply_text(
                info_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        elif action == 's':  
            scholarships = selected_uni['scholarships']
            info_text = (
                f"üí∞ *–°—Ç–∏–ø–µ–Ω–¥–∏–∏ –≤ {selected_uni['name']}*\n\n"
                f"üìã *–î–æ—Å—Ç—É–ø–Ω—ã–µ –≤–∏–¥—ã —Å—Ç–∏–ø–µ–Ω–¥–∏–π:*\n"
                + "\n".join([f"‚Ä¢ {s}" for s in scholarships['types']]) + "\n\n"
                f"üíµ *–†–∞–∑–º–µ—Ä—ã —Å—Ç–∏–ø–µ–Ω–¥–∏–π:*\n"
                + "\n".join([f"‚Ä¢ {a}" for a in scholarships['amounts']]) + "\n\n"
                f"‚úÖ *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è:*\n{scholarships['requirements']}"
            )
            
            await query.message.reply_text(
                info_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            
        elif action == 'u':  
            programs_text = "\n".join([f"‚Ä¢ {prog}" for prog in selected_uni['programs']])
            info_text = (
                f"üèõ *{selected_uni['name']}*\n\n"
                f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{selected_uni['description']}\n\n"
                f"üéì *–ü—Ä–æ–≥—Ä–∞–º–º—ã –æ–±—É—á–µ–Ω–∏—è:*\n{programs_text}\n\n"
                f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è:*\n"
                f"{selected_uni['tuition']['amount']} {selected_uni['tuition']['currency']}/–≥–æ–¥"
            )
            
            await query.message.reply_text(
                info_text,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
        
        return UNIVERSITY_INFO
        
    except Exception as e:
        print(f"Error in handle_university_selection: {str(e)}")
        await query.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —Å –∫–æ–º–∞–Ω–¥–æ–π /start",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞", callback_data="restart")
            ]])
        )
        return ConversationHandler.END


async def handle_question_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected_uni = context.user_data.get('selected_uni')
    if not selected_uni:
        await query.message.reply_text("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return SHOWING_UNIVERSITIES
        
    history = context.user_data.get('question_history', {}).get(selected_uni['name'], [])
    
    if not history:
        await query.message.reply_text(
            "üìù –ò—Å—Ç–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç–∞",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back")
            ]])
        )
        return SHOWING_UNIVERSITIES
    

    history_text = f"üìù *–ò—Å—Ç–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—Ä–æ {selected_uni['name']}:*\n\n"
    for i, question in enumerate(history, 1):
        history_text += f"{i}. {question}\n"
    
    keyboard = [
        [InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –Ω–æ–≤—ã–π –≤–æ–ø—Ä–æ—Å", callback_data=f"q_{selected_uni['name']}")],
        [InlineKeyboardButton("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é", callback_data="clear_history")],
        [InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back")]
    ]
    
    await query.message.reply_text(
        history_text,
        reply_markup=InlineKeyboardMarkup(keyboard),
        parse_mode='Markdown'
    )
    return SHOWING_UNIVERSITIES


async def clear_question_history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    selected_uni = context.user_data.get('selected_uni')
    if selected_uni and selected_uni['name'] in context.user_data.get('question_history', {}):
        context.user_data['question_history'][selected_uni['name']] = []
    
    await query.message.reply_text(
        "üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—á–∏—â–µ–Ω–∞",
        reply_markup=InlineKeyboardMarkup([[
            InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back")
        ]])
    )
    return SHOWING_UNIVERSITIES
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –∏ –∑–∞–ø—Ä–æ—Å GPA"""
    context.user_data.clear()  
    context.user_data['state'] = GPA  
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç—ã!\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —Å–≤–æ–π GPA (–Ω–∞–ø—Ä–∏–º–µ—Ä, 3.5)\n"
        "–ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /skip"
    )
    return GPA

async def skip(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü—Ä–æ–ø—É—Å–∫ —Ç–µ–∫—É—â–µ–≥–æ —à–∞–≥–∞"""
    current_state = context.user_data.get('state', GPA)
    
    next_states = {
        GPA: (COUNTRY, "–í–≤–µ–¥–∏ —Å—Ç—Ä–∞–Ω—É, –≥–¥–µ —Ö–æ—á–µ—à—å —É—á–∏—Ç—å—Å—è (–∏–ª–∏ /skip):"),
        COUNTRY: (SAT, "–í–≤–µ–¥–∏ —Å–≤–æ–π –±–∞–ª–ª SAT (–∏–ª–∏ /skip):"),
        SAT: (IELTS, "–í–≤–µ–¥–∏ —Å–≤–æ–π –±–∞–ª–ª IELTS (–∏–ª–∏ /skip):"),
        IELTS: (ADDITIONAL_INFO, "–î–æ–±–∞–≤—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ (–∏–ª–∏ /skip):")
    }
    
    if current_state in next_states:
        next_state, message = next_states[current_state]
        context.user_data['state'] = next_state
        await update.message.reply_text(message)
        return next_state
    
    return await process_info(update, context)

async def handle_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞"""
    user_input = update.message.text
    current_state = context.user_data.get('state', GPA)
    

    state_keys = {
        GPA: 'gpa',
        COUNTRY: 'country',
        SAT: 'sat',
        IELTS: 'ielts',
        ADDITIONAL_INFO: 'additional_info'
    }
    

    if current_state in state_keys:
        context.user_data[state_keys[current_state]] = user_input
    
 
    next_states = {
        GPA: (COUNTRY, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å—Ç—Ä–∞–Ω—É, –≥–¥–µ —Ö–æ—á–µ—à—å —É—á–∏—Ç—å—Å—è:"),
        COUNTRY: (SAT, "–•–æ—Ä–æ—à–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –±–∞–ª–ª SAT (–∏–ª–∏ /skip):"),
        SAT: (IELTS, "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ —Å–≤–æ–π –±–∞–ª–ª IELTS (–∏–ª–∏ /skip):"),
        IELTS: (ADDITIONAL_INFO, "–•–æ—Ä–æ—à–æ! –î–æ–±–∞–≤—å –ª—é–±—É—é –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ (–∏–ª–∏ /skip):")
    }
    
    if current_state in next_states:
        next_state, message = next_states[current_state]
        context.user_data['state'] = next_state
        await update.message.reply_text(message)
        return next_state
    
    return await process_info(update, context)

def generate_uni_id(uni_name: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–æ—Ä–æ—Ç–∫–∏–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –¥–ª—è —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞"""
    return hashlib.md5(uni_name.encode()).hexdigest()[:8]


async def handle_back_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥"""
    query = update.callback_query
    await query.answer()

    universities = context.user_data.get('universities', {})
    if not universities:
        await query.message.reply_text(
            "‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ù–∞—á–Ω–∏—Ç–µ –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ: /start"
        )
        return ConversationHandler.END

    message_text = "üéØ *–í—ã–±–µ—Ä–∏—Ç–µ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:*\n\n"

    for uni_id, uni in universities.items():
        programs_text = "\n".join([f"‚Ä¢ {prog}" for prog in uni.get('programs', [])])
        
        uni_info = (
            f"üèõ *{uni['name']}*\n\n"
            f"üìù *–û–ø–∏—Å–∞–Ω–∏–µ:*\n{uni['description']}\n\n"
            f"üéì *–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã:*\n{programs_text}\n\n"
            f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å –æ–±—É—á–µ–Ω–∏—è:*\n"
            f"{uni['tuition']['amount']} {uni['tuition']['currency']}/–≥–æ–¥"
        )
        
        keyboard = [
            [
                InlineKeyboardButton("üìã –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è", callback_data=f"r_{uni_id}"),
                InlineKeyboardButton("üí∞ –°—Ç–∏–ø–µ–Ω–¥–∏–∏", callback_data=f"s_{uni_id}")
            ],
            [
                InlineKeyboardButton("‚ùì –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data=f"q_{uni_id}"),
                InlineKeyboardButton("üìö –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"u_{uni_id}")
            ]
        ]
        
        try:
            img_data = await get_university_image(uni['name'])
            await context.bot.send_photo(
                chat_id=update.callback_query.message.chat_id,
                photo=img_data,
                caption=uni_info,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )
            await asyncio.sleep(1)
        except Exception as e:
            print(f"Error sending photo for {uni['name']}: {str(e)}")
            await query.message.reply_text(
                uni_info,
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode='Markdown'
            )

    final_keyboard = [[InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∑–∞–Ω–æ–≤–æ", callback_data="restart")]]
    await query.message.reply_text(
        "üí° *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≤–∞—Å —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞*",
        reply_markup=InlineKeyboardMarkup(final_keyboard),
        parse_mode='Markdown'
    )
    
    return SHOWING_UNIVERSITIES
async def handle_university_question(update: Update, context: ContextTypes.DEFAULT_TYPE):
    question = update.message.text
    selected_uni = context.user_data.get('selected_uni')
    
    prompt = f"""
    –í–æ–ø—Ä–æ—Å –ø—Ä–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç {selected_uni['name']}:
    {question}

    –ö–æ–Ω—Ç–µ–∫—Å—Ç –æ–± —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–µ:
    {json.dumps(selected_uni, ensure_ascii=False)}

    –î–∞–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å —Å—Ç—É–¥–µ–Ω—Ç–∞.
    """
    
    try:
        response = model.generate_content(prompt)
        
        keyboard = [[InlineKeyboardButton("‚Ü©Ô∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏", callback_data="back")]]
        
        await update.message.reply_text(
            f"*–û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—à –≤–æ–ø—Ä–æ—Å –ø—Ä–æ {selected_uni['name']}:*\n\n"
            f"{response.text}",
            reply_markup=InlineKeyboardMarkup(keyboard),
            parse_mode='Markdown'
        )
        return SHOWING_UNIVERSITIES
        
    except Exception as e:
        print(f"Error: {str(e)}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å –∏–Ω–∞—á–µ."
        )
        return SHOWING_UNIVERSITIES
async def update_loading_message(message, initial_text="üîÑ –ó–∞–≥—Ä—É–∑–∫–∞"):
    loading_states = [
        f"{initial_text}",
        f"{initial_text}.",
        f"{initial_text}..",
        f"{initial_text}..."
    ]
    
    for state in loading_states:
        try:
            await message.edit_text(state)
            await asyncio.sleep(0.5)
        except Exception:
            break


def main():
    application = Application.builder().token(os.getenv('TELEGRAM_TOKEN')).build()
    
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start)],
        states={
            GPA: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input),
                CommandHandler('skip', skip)
            ],
            COUNTRY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input),
                CommandHandler('skip', skip)
            ],
            SAT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input),
                CommandHandler('skip', skip)
            ],
            IELTS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input),
                CommandHandler('skip', skip)
            ],
            ADDITIONAL_INFO: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_input),
                CommandHandler('skip', skip)
            ],
            SHOWING_UNIVERSITIES: [
                CallbackQueryHandler(handle_back_action, pattern="^back$"),
                CallbackQueryHandler(handle_university_selection)
            ],
            UNIVERSITY_INFO: [
                CallbackQueryHandler(handle_back_action, pattern="^back$"),
                CallbackQueryHandler(handle_university_selection)
            ],
            UNIVERSITY_QUESTIONS: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_university_question),
                CallbackQueryHandler(handle_back_action, pattern="^back$")
            ]
        },
        fallbacks=[CommandHandler('start', start)]
    )
    
    application.add_handler(conv_handler)
    application.run_polling()
if __name__ == '__main__':
    main()